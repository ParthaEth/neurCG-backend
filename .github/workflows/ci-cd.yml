name: CI/CD Pipeline

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest 
    env:
      EC2_SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
      EC2_URL: ${{ secrets.EC2_URL }}
      EC2_USERNAME: ${{ secrets.EC2_USERNAME }}

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Build the project
      - name: Build the project
        run: npm run build

      # Step 5: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 6: Build and push Docker image to Docker Hub
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/backend:latest

      # Step 7: Setup SSH for EC2
      - name: Setup SSH for EC2
        uses: omarhosny206/setup-ssh-for-ec2@v1.0.0
        with:
          EC2_SSH_PRIVATE_KEY: $EC2_SSH_PRIVATE_KEY
          EC2_URL: $EC2_URL

      # Step 8: Deploy to EC2
      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_URL << EOF
            set -e

            # Clean up EC2 instance
            echo "Cleaning up EC2 instance..."
            docker image prune -f || { echo "Docker image prune failed"; exit 1; }

            # Check if Docker is installed
            if ! command -v docker &> /dev/null
            then 
              sudo apt-get update
              sudo apt-get install -y docker.io
            fi
            
            echo "Pulling Docker image..."
            docker pull ${DOCKER_USERNAME}/backend:latest || { echo "Docker pull failed"; exit 1; }
    
            echo "Stopping existing container..."
            docker stop backend || true 
            docker rm backend || true
    
            echo "Running new container..."
            docker run -d \
              --name backend \
              -p 8000:8000 \
              -e MONGO_URL="${MONGO_URL}" \
              -e PORT="${PORT}" \
              -e NEXT_PUBLIC_APP_URL="${NEXT_PUBLIC_APP_URL}" \
              -e RESEND_API_KEY="${RESEND_API_KEY}" \
              -e COMPANY_RESEND_GMAIL_ACCOUNT="${COMPANY_RESEND_GMAIL_ACCOUNT}" \
              -e STRIPE_SECRET_KEY="${STRIPE_SECRET_KEY}" \
              -e STRIPE_WEBHOOK_SECRET="${STRIPE_WEBHOOK_SECRET}" \
              -e STRIPE_PRICE_FREE="${STRIPE_PRICE_FREE}" \
              -e STRIPE_PRICE_INTRO="${STRIPE_PRICE_INTRO}" \
              -e STRIPE_YEARLY_PRICE_INTRO="${STRIPE_YEARLY_PRICE_INTRO}" \
              -e STRIPE_PRICE_PRO="${STRIPE_PRICE_PRO}" \
              -e STRIPE_YEARLY_PRICE_PRO="${STRIPE_YEARLY_PRICE_PRO}" \
              -e STRIPE_FRONTEND_SUCCESS_CALLBACK="${STRIPE_FRONTEND_SUCCESS_CALLBACK}" \
              -e STRIPE_FRONTEND_CANCEL_CALLBACK="${STRIPE_FRONTEND_CANCEL_CALLBACK}" \
              -e AUTH_SECRET="${AUTH_SECRET}" \
              -e JWT_SALT="${JWT_SALT}" \
              -e FLASK_BACKEND_ML_URL="${FLASK_BACKEND_ML_URL}" \
              ${DOCKER_USERNAME}/backend:latest || { echo "Docker run failed"; exit 1; }
    
            # Install Nginx if not present
            if ! command -v nginx &> /dev/null
            then
              sudo apt-get update
              sudo apt-get install -y nginx
            fi
    
            # Create Nginx configuration
            sudo tee /etc/nginx/sites-available/default > /dev/null << 'NGINX'
            server {
                listen 80;
                server_name ${EC2_URL};
    
                location / {
                    proxy_pass http://localhost:8000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \$host;
                    proxy_cache_bypass \$http_upgrade;
                }
            }
            NGINX
    
            sudo systemctl restart nginx || { echo "Nginx restart failed"; exit 1; }
    
            echo "Cleaning up..."
            docker system prune -af --volumes || { echo "Docker system prune failed"; exit 1; }
            sudo find /var/log/ -type f -name "*.log" -exec truncate -s 0 {} \;
            df -h
          EOF